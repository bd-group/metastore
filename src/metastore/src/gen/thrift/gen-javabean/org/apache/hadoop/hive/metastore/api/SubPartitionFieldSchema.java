/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SubPartitionFieldSchema implements org.apache.thrift.TBase<SubPartitionFieldSchema, SubPartitionFieldSchema._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubPartitionFieldSchema");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PART_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("part_num", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PART_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("part_level", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PART_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("part_type", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PART_TYPE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("part_type_param", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubPartitionFieldSchemaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubPartitionFieldSchemaTupleSchemeFactory());
  }

  private String name; // required
  private String type; // required
  private String comment; // required
  private int part_num; // required
  private int part_level; // required
  private String part_type; // required
  private String part_type_param; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TYPE((short)2, "type"),
    COMMENT((short)3, "comment"),
    PART_NUM((short)4, "part_num"),
    PART_LEVEL((short)5, "part_level"),
    PART_TYPE((short)6, "part_type"),
    PART_TYPE_PARAM((short)7, "part_type_param");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // COMMENT
          return COMMENT;
        case 4: // PART_NUM
          return PART_NUM;
        case 5: // PART_LEVEL
          return PART_LEVEL;
        case 6: // PART_TYPE
          return PART_TYPE;
        case 7: // PART_TYPE_PARAM
          return PART_TYPE_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PART_NUM_ISSET_ID = 0;
  private static final int __PART_LEVEL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PART_NUM, new org.apache.thrift.meta_data.FieldMetaData("part_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PART_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("part_level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PART_TYPE, new org.apache.thrift.meta_data.FieldMetaData("part_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PART_TYPE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("part_type_param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubPartitionFieldSchema.class, metaDataMap);
  }

  public SubPartitionFieldSchema() {
  }

  public SubPartitionFieldSchema(
    String name,
    String type,
    String comment,
    int part_num,
    int part_level,
    String part_type,
    String part_type_param)
  {
    this();
    this.name = name;
    this.type = type;
    this.comment = comment;
    this.part_num = part_num;
    setPart_numIsSet(true);
    this.part_level = part_level;
    setPart_levelIsSet(true);
    this.part_type = part_type;
    this.part_type_param = part_type_param;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubPartitionFieldSchema(SubPartitionFieldSchema other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    this.part_num = other.part_num;
    this.part_level = other.part_level;
    if (other.isSetPart_type()) {
      this.part_type = other.part_type;
    }
    if (other.isSetPart_type_param()) {
      this.part_type_param = other.part_type_param;
    }
  }

  public SubPartitionFieldSchema deepCopy() {
    return new SubPartitionFieldSchema(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.type = null;
    this.comment = null;
    setPart_numIsSet(false);
    this.part_num = 0;
    setPart_levelIsSet(false);
    this.part_level = 0;
    this.part_type = null;
    this.part_type_param = null;
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public int getPart_num() {
    return this.part_num;
  }

  public void setPart_num(int part_num) {
    this.part_num = part_num;
    setPart_numIsSet(true);
  }

  public void unsetPart_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PART_NUM_ISSET_ID);
  }

  /** Returns true if field part_num is set (has been assigned a value) and false otherwise */
  public boolean isSetPart_num() {
    return EncodingUtils.testBit(__isset_bitfield, __PART_NUM_ISSET_ID);
  }

  public void setPart_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PART_NUM_ISSET_ID, value);
  }

  public int getPart_level() {
    return this.part_level;
  }

  public void setPart_level(int part_level) {
    this.part_level = part_level;
    setPart_levelIsSet(true);
  }

  public void unsetPart_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PART_LEVEL_ISSET_ID);
  }

  /** Returns true if field part_level is set (has been assigned a value) and false otherwise */
  public boolean isSetPart_level() {
    return EncodingUtils.testBit(__isset_bitfield, __PART_LEVEL_ISSET_ID);
  }

  public void setPart_levelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PART_LEVEL_ISSET_ID, value);
  }

  public String getPart_type() {
    return this.part_type;
  }

  public void setPart_type(String part_type) {
    this.part_type = part_type;
  }

  public void unsetPart_type() {
    this.part_type = null;
  }

  /** Returns true if field part_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPart_type() {
    return this.part_type != null;
  }

  public void setPart_typeIsSet(boolean value) {
    if (!value) {
      this.part_type = null;
    }
  }

  public String getPart_type_param() {
    return this.part_type_param;
  }

  public void setPart_type_param(String part_type_param) {
    this.part_type_param = part_type_param;
  }

  public void unsetPart_type_param() {
    this.part_type_param = null;
  }

  /** Returns true if field part_type_param is set (has been assigned a value) and false otherwise */
  public boolean isSetPart_type_param() {
    return this.part_type_param != null;
  }

  public void setPart_type_paramIsSet(boolean value) {
    if (!value) {
      this.part_type_param = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case PART_NUM:
      if (value == null) {
        unsetPart_num();
      } else {
        setPart_num((Integer)value);
      }
      break;

    case PART_LEVEL:
      if (value == null) {
        unsetPart_level();
      } else {
        setPart_level((Integer)value);
      }
      break;

    case PART_TYPE:
      if (value == null) {
        unsetPart_type();
      } else {
        setPart_type((String)value);
      }
      break;

    case PART_TYPE_PARAM:
      if (value == null) {
        unsetPart_type_param();
      } else {
        setPart_type_param((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case COMMENT:
      return getComment();

    case PART_NUM:
      return Integer.valueOf(getPart_num());

    case PART_LEVEL:
      return Integer.valueOf(getPart_level());

    case PART_TYPE:
      return getPart_type();

    case PART_TYPE_PARAM:
      return getPart_type_param();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case COMMENT:
      return isSetComment();
    case PART_NUM:
      return isSetPart_num();
    case PART_LEVEL:
      return isSetPart_level();
    case PART_TYPE:
      return isSetPart_type();
    case PART_TYPE_PARAM:
      return isSetPart_type_param();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubPartitionFieldSchema)
      return this.equals((SubPartitionFieldSchema)that);
    return false;
  }

  public boolean equals(SubPartitionFieldSchema that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_part_num = true;
    boolean that_present_part_num = true;
    if (this_present_part_num || that_present_part_num) {
      if (!(this_present_part_num && that_present_part_num))
        return false;
      if (this.part_num != that.part_num)
        return false;
    }

    boolean this_present_part_level = true;
    boolean that_present_part_level = true;
    if (this_present_part_level || that_present_part_level) {
      if (!(this_present_part_level && that_present_part_level))
        return false;
      if (this.part_level != that.part_level)
        return false;
    }

    boolean this_present_part_type = true && this.isSetPart_type();
    boolean that_present_part_type = true && that.isSetPart_type();
    if (this_present_part_type || that_present_part_type) {
      if (!(this_present_part_type && that_present_part_type))
        return false;
      if (!this.part_type.equals(that.part_type))
        return false;
    }

    boolean this_present_part_type_param = true && this.isSetPart_type_param();
    boolean that_present_part_type_param = true && that.isSetPart_type_param();
    if (this_present_part_type_param || that_present_part_type_param) {
      if (!(this_present_part_type_param && that_present_part_type_param))
        return false;
      if (!this.part_type_param.equals(that.part_type_param))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_comment = true && (isSetComment());
    builder.append(present_comment);
    if (present_comment)
      builder.append(comment);

    boolean present_part_num = true;
    builder.append(present_part_num);
    if (present_part_num)
      builder.append(part_num);

    boolean present_part_level = true;
    builder.append(present_part_level);
    if (present_part_level)
      builder.append(part_level);

    boolean present_part_type = true && (isSetPart_type());
    builder.append(present_part_type);
    if (present_part_type)
      builder.append(part_type);

    boolean present_part_type_param = true && (isSetPart_type_param());
    builder.append(present_part_type_param);
    if (present_part_type_param)
      builder.append(part_type_param);

    return builder.toHashCode();
  }

  public int compareTo(SubPartitionFieldSchema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SubPartitionFieldSchema typedOther = (SubPartitionFieldSchema)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPart_num()).compareTo(typedOther.isSetPart_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPart_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.part_num, typedOther.part_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPart_level()).compareTo(typedOther.isSetPart_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPart_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.part_level, typedOther.part_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPart_type()).compareTo(typedOther.isSetPart_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPart_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.part_type, typedOther.part_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPart_type_param()).compareTo(typedOther.isSetPart_type_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPart_type_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.part_type_param, typedOther.part_type_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubPartitionFieldSchema(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("part_num:");
    sb.append(this.part_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("part_level:");
    sb.append(this.part_level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("part_type:");
    if (this.part_type == null) {
      sb.append("null");
    } else {
      sb.append(this.part_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("part_type_param:");
    if (this.part_type_param == null) {
      sb.append("null");
    } else {
      sb.append(this.part_type_param);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubPartitionFieldSchemaStandardSchemeFactory implements SchemeFactory {
    public SubPartitionFieldSchemaStandardScheme getScheme() {
      return new SubPartitionFieldSchemaStandardScheme();
    }
  }

  private static class SubPartitionFieldSchemaStandardScheme extends StandardScheme<SubPartitionFieldSchema> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubPartitionFieldSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PART_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.part_num = iprot.readI32();
              struct.setPart_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PART_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.part_level = iprot.readI32();
              struct.setPart_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PART_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.part_type = iprot.readString();
              struct.setPart_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PART_TYPE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.part_type_param = iprot.readString();
              struct.setPart_type_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubPartitionFieldSchema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(struct.comment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PART_NUM_FIELD_DESC);
      oprot.writeI32(struct.part_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PART_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.part_level);
      oprot.writeFieldEnd();
      if (struct.part_type != null) {
        oprot.writeFieldBegin(PART_TYPE_FIELD_DESC);
        oprot.writeString(struct.part_type);
        oprot.writeFieldEnd();
      }
      if (struct.part_type_param != null) {
        oprot.writeFieldBegin(PART_TYPE_PARAM_FIELD_DESC);
        oprot.writeString(struct.part_type_param);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubPartitionFieldSchemaTupleSchemeFactory implements SchemeFactory {
    public SubPartitionFieldSchemaTupleScheme getScheme() {
      return new SubPartitionFieldSchemaTupleScheme();
    }
  }

  private static class SubPartitionFieldSchemaTupleScheme extends TupleScheme<SubPartitionFieldSchema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubPartitionFieldSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetComment()) {
        optionals.set(2);
      }
      if (struct.isSetPart_num()) {
        optionals.set(3);
      }
      if (struct.isSetPart_level()) {
        optionals.set(4);
      }
      if (struct.isSetPart_type()) {
        optionals.set(5);
      }
      if (struct.isSetPart_type_param()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetPart_num()) {
        oprot.writeI32(struct.part_num);
      }
      if (struct.isSetPart_level()) {
        oprot.writeI32(struct.part_level);
      }
      if (struct.isSetPart_type()) {
        oprot.writeString(struct.part_type);
      }
      if (struct.isSetPart_type_param()) {
        oprot.writeString(struct.part_type_param);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubPartitionFieldSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.part_num = iprot.readI32();
        struct.setPart_numIsSet(true);
      }
      if (incoming.get(4)) {
        struct.part_level = iprot.readI32();
        struct.setPart_levelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.part_type = iprot.readString();
        struct.setPart_typeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.part_type_param = iprot.readString();
        struct.setPart_type_paramIsSet(true);
      }
    }
  }

}

