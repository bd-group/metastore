/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SFile implements org.apache.thrift.TBase<SFile, SFile._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SFile");

  private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PLACEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("placement", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField STORE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("store_status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REP_NR_FIELD_DESC = new org.apache.thrift.protocol.TField("rep_nr", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECORD_NR_FIELD_DESC = new org.apache.thrift.protocol.TField("record_nr", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ALL_RECORD_NR_FIELD_DESC = new org.apache.thrift.protocol.TField("all_record_nr", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LOCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("locations", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SFileTupleSchemeFactory());
  }

  private long fid; // required
  private long placement; // required
  private int store_status; // required
  private int rep_nr; // required
  private String digest; // required
  private long record_nr; // required
  private long all_record_nr; // required
  private List<SFileLocation> locations; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FID((short)1, "fid"),
    PLACEMENT((short)2, "placement"),
    STORE_STATUS((short)3, "store_status"),
    REP_NR((short)4, "rep_nr"),
    DIGEST((short)5, "digest"),
    RECORD_NR((short)6, "record_nr"),
    ALL_RECORD_NR((short)7, "all_record_nr"),
    LOCATIONS((short)8, "locations");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FID
          return FID;
        case 2: // PLACEMENT
          return PLACEMENT;
        case 3: // STORE_STATUS
          return STORE_STATUS;
        case 4: // REP_NR
          return REP_NR;
        case 5: // DIGEST
          return DIGEST;
        case 6: // RECORD_NR
          return RECORD_NR;
        case 7: // ALL_RECORD_NR
          return ALL_RECORD_NR;
        case 8: // LOCATIONS
          return LOCATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FID_ISSET_ID = 0;
  private static final int __PLACEMENT_ISSET_ID = 1;
  private static final int __STORE_STATUS_ISSET_ID = 2;
  private static final int __REP_NR_ISSET_ID = 3;
  private static final int __RECORD_NR_ISSET_ID = 4;
  private static final int __ALL_RECORD_NR_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLACEMENT, new org.apache.thrift.meta_data.FieldMetaData("placement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("store_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REP_NR, new org.apache.thrift.meta_data.FieldMetaData("rep_nr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_NR, new org.apache.thrift.meta_data.FieldMetaData("record_nr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALL_RECORD_NR, new org.apache.thrift.meta_data.FieldMetaData("all_record_nr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCATIONS, new org.apache.thrift.meta_data.FieldMetaData("locations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SFileLocation.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SFile.class, metaDataMap);
  }

  public SFile() {
  }

  public SFile(
    long fid,
    long placement,
    int store_status,
    int rep_nr,
    String digest,
    long record_nr,
    long all_record_nr,
    List<SFileLocation> locations)
  {
    this();
    this.fid = fid;
    setFidIsSet(true);
    this.placement = placement;
    setPlacementIsSet(true);
    this.store_status = store_status;
    setStore_statusIsSet(true);
    this.rep_nr = rep_nr;
    setRep_nrIsSet(true);
    this.digest = digest;
    this.record_nr = record_nr;
    setRecord_nrIsSet(true);
    this.all_record_nr = all_record_nr;
    setAll_record_nrIsSet(true);
    this.locations = locations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SFile(SFile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fid = other.fid;
    this.placement = other.placement;
    this.store_status = other.store_status;
    this.rep_nr = other.rep_nr;
    if (other.isSetDigest()) {
      this.digest = other.digest;
    }
    this.record_nr = other.record_nr;
    this.all_record_nr = other.all_record_nr;
    if (other.isSetLocations()) {
      List<SFileLocation> __this__locations = new ArrayList<SFileLocation>();
      for (SFileLocation other_element : other.locations) {
        __this__locations.add(new SFileLocation(other_element));
      }
      this.locations = __this__locations;
    }
  }

  public SFile deepCopy() {
    return new SFile(this);
  }

  @Override
  public void clear() {
    setFidIsSet(false);
    this.fid = 0;
    setPlacementIsSet(false);
    this.placement = 0;
    setStore_statusIsSet(false);
    this.store_status = 0;
    setRep_nrIsSet(false);
    this.rep_nr = 0;
    this.digest = null;
    setRecord_nrIsSet(false);
    this.record_nr = 0;
    setAll_record_nrIsSet(false);
    this.all_record_nr = 0;
    this.locations = null;
  }

  public long getFid() {
    return this.fid;
  }

  public void setFid(long fid) {
    this.fid = fid;
    setFidIsSet(true);
  }

  public void unsetFid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
  }

  /** Returns true if field fid is set (has been assigned a value) and false otherwise */
  public boolean isSetFid() {
    return EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
  }

  public void setFidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
  }

  public long getPlacement() {
    return this.placement;
  }

  public void setPlacement(long placement) {
    this.placement = placement;
    setPlacementIsSet(true);
  }

  public void unsetPlacement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLACEMENT_ISSET_ID);
  }

  /** Returns true if field placement is set (has been assigned a value) and false otherwise */
  public boolean isSetPlacement() {
    return EncodingUtils.testBit(__isset_bitfield, __PLACEMENT_ISSET_ID);
  }

  public void setPlacementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLACEMENT_ISSET_ID, value);
  }

  public int getStore_status() {
    return this.store_status;
  }

  public void setStore_status(int store_status) {
    this.store_status = store_status;
    setStore_statusIsSet(true);
  }

  public void unsetStore_status() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORE_STATUS_ISSET_ID);
  }

  /** Returns true if field store_status is set (has been assigned a value) and false otherwise */
  public boolean isSetStore_status() {
    return EncodingUtils.testBit(__isset_bitfield, __STORE_STATUS_ISSET_ID);
  }

  public void setStore_statusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORE_STATUS_ISSET_ID, value);
  }

  public int getRep_nr() {
    return this.rep_nr;
  }

  public void setRep_nr(int rep_nr) {
    this.rep_nr = rep_nr;
    setRep_nrIsSet(true);
  }

  public void unsetRep_nr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REP_NR_ISSET_ID);
  }

  /** Returns true if field rep_nr is set (has been assigned a value) and false otherwise */
  public boolean isSetRep_nr() {
    return EncodingUtils.testBit(__isset_bitfield, __REP_NR_ISSET_ID);
  }

  public void setRep_nrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REP_NR_ISSET_ID, value);
  }

  public String getDigest() {
    return this.digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public long getRecord_nr() {
    return this.record_nr;
  }

  public void setRecord_nr(long record_nr) {
    this.record_nr = record_nr;
    setRecord_nrIsSet(true);
  }

  public void unsetRecord_nr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORD_NR_ISSET_ID);
  }

  /** Returns true if field record_nr is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord_nr() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORD_NR_ISSET_ID);
  }

  public void setRecord_nrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORD_NR_ISSET_ID, value);
  }

  public long getAll_record_nr() {
    return this.all_record_nr;
  }

  public void setAll_record_nr(long all_record_nr) {
    this.all_record_nr = all_record_nr;
    setAll_record_nrIsSet(true);
  }

  public void unsetAll_record_nr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALL_RECORD_NR_ISSET_ID);
  }

  /** Returns true if field all_record_nr is set (has been assigned a value) and false otherwise */
  public boolean isSetAll_record_nr() {
    return EncodingUtils.testBit(__isset_bitfield, __ALL_RECORD_NR_ISSET_ID);
  }

  public void setAll_record_nrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALL_RECORD_NR_ISSET_ID, value);
  }

  public int getLocationsSize() {
    return (this.locations == null) ? 0 : this.locations.size();
  }

  public java.util.Iterator<SFileLocation> getLocationsIterator() {
    return (this.locations == null) ? null : this.locations.iterator();
  }

  public void addToLocations(SFileLocation elem) {
    if (this.locations == null) {
      this.locations = new ArrayList<SFileLocation>();
    }
    this.locations.add(elem);
  }

  public List<SFileLocation> getLocations() {
    return this.locations;
  }

  public void setLocations(List<SFileLocation> locations) {
    this.locations = locations;
  }

  public void unsetLocations() {
    this.locations = null;
  }

  /** Returns true if field locations is set (has been assigned a value) and false otherwise */
  public boolean isSetLocations() {
    return this.locations != null;
  }

  public void setLocationsIsSet(boolean value) {
    if (!value) {
      this.locations = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FID:
      if (value == null) {
        unsetFid();
      } else {
        setFid((Long)value);
      }
      break;

    case PLACEMENT:
      if (value == null) {
        unsetPlacement();
      } else {
        setPlacement((Long)value);
      }
      break;

    case STORE_STATUS:
      if (value == null) {
        unsetStore_status();
      } else {
        setStore_status((Integer)value);
      }
      break;

    case REP_NR:
      if (value == null) {
        unsetRep_nr();
      } else {
        setRep_nr((Integer)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        setDigest((String)value);
      }
      break;

    case RECORD_NR:
      if (value == null) {
        unsetRecord_nr();
      } else {
        setRecord_nr((Long)value);
      }
      break;

    case ALL_RECORD_NR:
      if (value == null) {
        unsetAll_record_nr();
      } else {
        setAll_record_nr((Long)value);
      }
      break;

    case LOCATIONS:
      if (value == null) {
        unsetLocations();
      } else {
        setLocations((List<SFileLocation>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FID:
      return Long.valueOf(getFid());

    case PLACEMENT:
      return Long.valueOf(getPlacement());

    case STORE_STATUS:
      return Integer.valueOf(getStore_status());

    case REP_NR:
      return Integer.valueOf(getRep_nr());

    case DIGEST:
      return getDigest();

    case RECORD_NR:
      return Long.valueOf(getRecord_nr());

    case ALL_RECORD_NR:
      return Long.valueOf(getAll_record_nr());

    case LOCATIONS:
      return getLocations();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FID:
      return isSetFid();
    case PLACEMENT:
      return isSetPlacement();
    case STORE_STATUS:
      return isSetStore_status();
    case REP_NR:
      return isSetRep_nr();
    case DIGEST:
      return isSetDigest();
    case RECORD_NR:
      return isSetRecord_nr();
    case ALL_RECORD_NR:
      return isSetAll_record_nr();
    case LOCATIONS:
      return isSetLocations();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SFile)
      return this.equals((SFile)that);
    return false;
  }

  public boolean equals(SFile that) {
    if (that == null)
      return false;

    boolean this_present_fid = true;
    boolean that_present_fid = true;
    if (this_present_fid || that_present_fid) {
      if (!(this_present_fid && that_present_fid))
        return false;
      if (this.fid != that.fid)
        return false;
    }

    boolean this_present_placement = true;
    boolean that_present_placement = true;
    if (this_present_placement || that_present_placement) {
      if (!(this_present_placement && that_present_placement))
        return false;
      if (this.placement != that.placement)
        return false;
    }

    boolean this_present_store_status = true;
    boolean that_present_store_status = true;
    if (this_present_store_status || that_present_store_status) {
      if (!(this_present_store_status && that_present_store_status))
        return false;
      if (this.store_status != that.store_status)
        return false;
    }

    boolean this_present_rep_nr = true;
    boolean that_present_rep_nr = true;
    if (this_present_rep_nr || that_present_rep_nr) {
      if (!(this_present_rep_nr && that_present_rep_nr))
        return false;
      if (this.rep_nr != that.rep_nr)
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_record_nr = true;
    boolean that_present_record_nr = true;
    if (this_present_record_nr || that_present_record_nr) {
      if (!(this_present_record_nr && that_present_record_nr))
        return false;
      if (this.record_nr != that.record_nr)
        return false;
    }

    boolean this_present_all_record_nr = true;
    boolean that_present_all_record_nr = true;
    if (this_present_all_record_nr || that_present_all_record_nr) {
      if (!(this_present_all_record_nr && that_present_all_record_nr))
        return false;
      if (this.all_record_nr != that.all_record_nr)
        return false;
    }

    boolean this_present_locations = true && this.isSetLocations();
    boolean that_present_locations = true && that.isSetLocations();
    if (this_present_locations || that_present_locations) {
      if (!(this_present_locations && that_present_locations))
        return false;
      if (!this.locations.equals(that.locations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fid = true;
    builder.append(present_fid);
    if (present_fid)
      builder.append(fid);

    boolean present_placement = true;
    builder.append(present_placement);
    if (present_placement)
      builder.append(placement);

    boolean present_store_status = true;
    builder.append(present_store_status);
    if (present_store_status)
      builder.append(store_status);

    boolean present_rep_nr = true;
    builder.append(present_rep_nr);
    if (present_rep_nr)
      builder.append(rep_nr);

    boolean present_digest = true && (isSetDigest());
    builder.append(present_digest);
    if (present_digest)
      builder.append(digest);

    boolean present_record_nr = true;
    builder.append(present_record_nr);
    if (present_record_nr)
      builder.append(record_nr);

    boolean present_all_record_nr = true;
    builder.append(present_all_record_nr);
    if (present_all_record_nr)
      builder.append(all_record_nr);

    boolean present_locations = true && (isSetLocations());
    builder.append(present_locations);
    if (present_locations)
      builder.append(locations);

    return builder.toHashCode();
  }

  public int compareTo(SFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SFile typedOther = (SFile)other;

    lastComparison = Boolean.valueOf(isSetFid()).compareTo(typedOther.isSetFid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, typedOther.fid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlacement()).compareTo(typedOther.isSetPlacement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlacement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.placement, typedOther.placement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStore_status()).compareTo(typedOther.isSetStore_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStore_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.store_status, typedOther.store_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRep_nr()).compareTo(typedOther.isSetRep_nr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRep_nr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rep_nr, typedOther.rep_nr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDigest()).compareTo(typedOther.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, typedOther.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord_nr()).compareTo(typedOther.isSetRecord_nr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord_nr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record_nr, typedOther.record_nr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAll_record_nr()).compareTo(typedOther.isSetAll_record_nr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAll_record_nr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_record_nr, typedOther.all_record_nr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocations()).compareTo(typedOther.isSetLocations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locations, typedOther.locations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SFile(");
    boolean first = true;

    sb.append("fid:");
    sb.append(this.fid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("placement:");
    sb.append(this.placement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("store_status:");
    sb.append(this.store_status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rep_nr:");
    sb.append(this.rep_nr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("digest:");
    if (this.digest == null) {
      sb.append("null");
    } else {
      sb.append(this.digest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("record_nr:");
    sb.append(this.record_nr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("all_record_nr:");
    sb.append(this.all_record_nr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locations:");
    if (this.locations == null) {
      sb.append("null");
    } else {
      sb.append(this.locations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SFileStandardSchemeFactory implements SchemeFactory {
    public SFileStandardScheme getScheme() {
      return new SFileStandardScheme();
    }
  }

  private static class SFileStandardScheme extends StandardScheme<SFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fid = iprot.readI64();
              struct.setFidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLACEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.placement = iprot.readI64();
              struct.setPlacementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STORE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.store_status = iprot.readI32();
              struct.setStore_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REP_NR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rep_nr = iprot.readI32();
              struct.setRep_nrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.digest = iprot.readString();
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECORD_NR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.record_nr = iprot.readI64();
              struct.setRecord_nrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALL_RECORD_NR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.all_record_nr = iprot.readI64();
              struct.setAll_record_nrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOCATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list252 = iprot.readListBegin();
                struct.locations = new ArrayList<SFileLocation>(_list252.size);
                for (int _i253 = 0; _i253 < _list252.size; ++_i253)
                {
                  SFileLocation _elem254; // required
                  _elem254 = new SFileLocation();
                  _elem254.read(iprot);
                  struct.locations.add(_elem254);
                }
                iprot.readListEnd();
              }
              struct.setLocationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FID_FIELD_DESC);
      oprot.writeI64(struct.fid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLACEMENT_FIELD_DESC);
      oprot.writeI64(struct.placement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STORE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.store_status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REP_NR_FIELD_DESC);
      oprot.writeI32(struct.rep_nr);
      oprot.writeFieldEnd();
      if (struct.digest != null) {
        oprot.writeFieldBegin(DIGEST_FIELD_DESC);
        oprot.writeString(struct.digest);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECORD_NR_FIELD_DESC);
      oprot.writeI64(struct.record_nr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALL_RECORD_NR_FIELD_DESC);
      oprot.writeI64(struct.all_record_nr);
      oprot.writeFieldEnd();
      if (struct.locations != null) {
        oprot.writeFieldBegin(LOCATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.locations.size()));
          for (SFileLocation _iter255 : struct.locations)
          {
            _iter255.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SFileTupleSchemeFactory implements SchemeFactory {
    public SFileTupleScheme getScheme() {
      return new SFileTupleScheme();
    }
  }

  private static class SFileTupleScheme extends TupleScheme<SFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFid()) {
        optionals.set(0);
      }
      if (struct.isSetPlacement()) {
        optionals.set(1);
      }
      if (struct.isSetStore_status()) {
        optionals.set(2);
      }
      if (struct.isSetRep_nr()) {
        optionals.set(3);
      }
      if (struct.isSetDigest()) {
        optionals.set(4);
      }
      if (struct.isSetRecord_nr()) {
        optionals.set(5);
      }
      if (struct.isSetAll_record_nr()) {
        optionals.set(6);
      }
      if (struct.isSetLocations()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetFid()) {
        oprot.writeI64(struct.fid);
      }
      if (struct.isSetPlacement()) {
        oprot.writeI64(struct.placement);
      }
      if (struct.isSetStore_status()) {
        oprot.writeI32(struct.store_status);
      }
      if (struct.isSetRep_nr()) {
        oprot.writeI32(struct.rep_nr);
      }
      if (struct.isSetDigest()) {
        oprot.writeString(struct.digest);
      }
      if (struct.isSetRecord_nr()) {
        oprot.writeI64(struct.record_nr);
      }
      if (struct.isSetAll_record_nr()) {
        oprot.writeI64(struct.all_record_nr);
      }
      if (struct.isSetLocations()) {
        {
          oprot.writeI32(struct.locations.size());
          for (SFileLocation _iter256 : struct.locations)
          {
            _iter256.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.fid = iprot.readI64();
        struct.setFidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.placement = iprot.readI64();
        struct.setPlacementIsSet(true);
      }
      if (incoming.get(2)) {
        struct.store_status = iprot.readI32();
        struct.setStore_statusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rep_nr = iprot.readI32();
        struct.setRep_nrIsSet(true);
      }
      if (incoming.get(4)) {
        struct.digest = iprot.readString();
        struct.setDigestIsSet(true);
      }
      if (incoming.get(5)) {
        struct.record_nr = iprot.readI64();
        struct.setRecord_nrIsSet(true);
      }
      if (incoming.get(6)) {
        struct.all_record_nr = iprot.readI64();
        struct.setAll_record_nrIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list257 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locations = new ArrayList<SFileLocation>(_list257.size);
          for (int _i258 = 0; _i258 < _list257.size; ++_i258)
          {
            SFileLocation _elem259; // required
            _elem259 = new SFileLocation();
            _elem259.read(iprot);
            struct.locations.add(_elem259);
          }
        }
        struct.setLocationsIsSet(true);
      }
    }
  }

}

