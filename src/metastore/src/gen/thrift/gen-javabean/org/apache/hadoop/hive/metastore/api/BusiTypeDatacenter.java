/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BusiTypeDatacenter implements org.apache.thrift.TBase<BusiTypeDatacenter, BusiTypeDatacenter._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusiTypeDatacenter");

  private static final org.apache.thrift.protocol.TField BUSI_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("busiType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DC_FIELD_DESC = new org.apache.thrift.protocol.TField("dc", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusiTypeDatacenterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusiTypeDatacenterTupleSchemeFactory());
  }

  private String busiType; // required
  private Datacenter dc; // required
  private String db_name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUSI_TYPE((short)1, "busiType"),
    DC((short)2, "dc"),
    DB_NAME((short)3, "db_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUSI_TYPE
          return BUSI_TYPE;
        case 2: // DC
          return DC;
        case 3: // DB_NAME
          return DB_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUSI_TYPE, new org.apache.thrift.meta_data.FieldMetaData("busiType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DC, new org.apache.thrift.meta_data.FieldMetaData("dc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Datacenter.class)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusiTypeDatacenter.class, metaDataMap);
  }

  public BusiTypeDatacenter() {
  }

  public BusiTypeDatacenter(
    String busiType,
    Datacenter dc,
    String db_name)
  {
    this();
    this.busiType = busiType;
    this.dc = dc;
    this.db_name = db_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusiTypeDatacenter(BusiTypeDatacenter other) {
    if (other.isSetBusiType()) {
      this.busiType = other.busiType;
    }
    if (other.isSetDc()) {
      this.dc = new Datacenter(other.dc);
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
  }

  public BusiTypeDatacenter deepCopy() {
    return new BusiTypeDatacenter(this);
  }

  @Override
  public void clear() {
    this.busiType = null;
    this.dc = null;
    this.db_name = null;
  }

  public String getBusiType() {
    return this.busiType;
  }

  public void setBusiType(String busiType) {
    this.busiType = busiType;
  }

  public void unsetBusiType() {
    this.busiType = null;
  }

  /** Returns true if field busiType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusiType() {
    return this.busiType != null;
  }

  public void setBusiTypeIsSet(boolean value) {
    if (!value) {
      this.busiType = null;
    }
  }

  public Datacenter getDc() {
    return this.dc;
  }

  public void setDc(Datacenter dc) {
    this.dc = dc;
  }

  public void unsetDc() {
    this.dc = null;
  }

  /** Returns true if field dc is set (has been assigned a value) and false otherwise */
  public boolean isSetDc() {
    return this.dc != null;
  }

  public void setDcIsSet(boolean value) {
    if (!value) {
      this.dc = null;
    }
  }

  public String getDb_name() {
    return this.db_name;
  }

  public void setDb_name(String db_name) {
    this.db_name = db_name;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUSI_TYPE:
      if (value == null) {
        unsetBusiType();
      } else {
        setBusiType((String)value);
      }
      break;

    case DC:
      if (value == null) {
        unsetDc();
      } else {
        setDc((Datacenter)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUSI_TYPE:
      return getBusiType();

    case DC:
      return getDc();

    case DB_NAME:
      return getDb_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUSI_TYPE:
      return isSetBusiType();
    case DC:
      return isSetDc();
    case DB_NAME:
      return isSetDb_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusiTypeDatacenter)
      return this.equals((BusiTypeDatacenter)that);
    return false;
  }

  public boolean equals(BusiTypeDatacenter that) {
    if (that == null)
      return false;

    boolean this_present_busiType = true && this.isSetBusiType();
    boolean that_present_busiType = true && that.isSetBusiType();
    if (this_present_busiType || that_present_busiType) {
      if (!(this_present_busiType && that_present_busiType))
        return false;
      if (!this.busiType.equals(that.busiType))
        return false;
    }

    boolean this_present_dc = true && this.isSetDc();
    boolean that_present_dc = true && that.isSetDc();
    if (this_present_dc || that_present_dc) {
      if (!(this_present_dc && that_present_dc))
        return false;
      if (!this.dc.equals(that.dc))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_busiType = true && (isSetBusiType());
    builder.append(present_busiType);
    if (present_busiType)
      builder.append(busiType);

    boolean present_dc = true && (isSetDc());
    builder.append(present_dc);
    if (present_dc)
      builder.append(dc);

    boolean present_db_name = true && (isSetDb_name());
    builder.append(present_db_name);
    if (present_db_name)
      builder.append(db_name);

    return builder.toHashCode();
  }

  public int compareTo(BusiTypeDatacenter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BusiTypeDatacenter typedOther = (BusiTypeDatacenter)other;

    lastComparison = Boolean.valueOf(isSetBusiType()).compareTo(typedOther.isSetBusiType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusiType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busiType, typedOther.busiType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDc()).compareTo(typedOther.isSetDc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dc, typedOther.dc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, typedOther.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusiTypeDatacenter(");
    boolean first = true;

    sb.append("busiType:");
    if (this.busiType == null) {
      sb.append("null");
    } else {
      sb.append(this.busiType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dc:");
    if (this.dc == null) {
      sb.append("null");
    } else {
      sb.append(this.dc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dc != null) {
      dc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusiTypeDatacenterStandardSchemeFactory implements SchemeFactory {
    public BusiTypeDatacenterStandardScheme getScheme() {
      return new BusiTypeDatacenterStandardScheme();
    }
  }

  private static class BusiTypeDatacenterStandardScheme extends StandardScheme<BusiTypeDatacenter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusiTypeDatacenter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUSI_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busiType = iprot.readString();
              struct.setBusiTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dc = new Datacenter();
              struct.dc.read(iprot);
              struct.setDcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusiTypeDatacenter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.busiType != null) {
        oprot.writeFieldBegin(BUSI_TYPE_FIELD_DESC);
        oprot.writeString(struct.busiType);
        oprot.writeFieldEnd();
      }
      if (struct.dc != null) {
        oprot.writeFieldBegin(DC_FIELD_DESC);
        struct.dc.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusiTypeDatacenterTupleSchemeFactory implements SchemeFactory {
    public BusiTypeDatacenterTupleScheme getScheme() {
      return new BusiTypeDatacenterTupleScheme();
    }
  }

  private static class BusiTypeDatacenterTupleScheme extends TupleScheme<BusiTypeDatacenter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusiTypeDatacenter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBusiType()) {
        optionals.set(0);
      }
      if (struct.isSetDc()) {
        optionals.set(1);
      }
      if (struct.isSetDb_name()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBusiType()) {
        oprot.writeString(struct.busiType);
      }
      if (struct.isSetDc()) {
        struct.dc.write(oprot);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusiTypeDatacenter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.busiType = iprot.readString();
        struct.setBusiTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dc = new Datacenter();
        struct.dc.read(iprot);
        struct.setDcIsSet(true);
      }
      if (incoming.get(2)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
    }
  }

}

