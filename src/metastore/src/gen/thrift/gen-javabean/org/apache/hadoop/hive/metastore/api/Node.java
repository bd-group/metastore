/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Node implements org.apache.thrift.TBase<Node, Node._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Node");

  private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("node_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("ips", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeTupleSchemeFactory());
  }

  private String node_name; // required
  private List<String> ips; // required
  private int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_NAME((short)1, "node_name"),
    IPS((short)2, "ips"),
    STATUS((short)3, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_NAME
          return NODE_NAME;
        case 2: // IPS
          return IPS;
        case 3: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("node_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IPS, new org.apache.thrift.meta_data.FieldMetaData("ips", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Node.class, metaDataMap);
  }

  public Node() {
  }

  public Node(
    String node_name,
    List<String> ips,
    int status)
  {
    this();
    this.node_name = node_name;
    this.ips = ips;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Node(Node other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNode_name()) {
      this.node_name = other.node_name;
    }
    if (other.isSetIps()) {
      List<String> __this__ips = new ArrayList<String>();
      for (String other_element : other.ips) {
        __this__ips.add(other_element);
      }
      this.ips = __this__ips;
    }
    this.status = other.status;
  }

  public Node deepCopy() {
    return new Node(this);
  }

  @Override
  public void clear() {
    this.node_name = null;
    this.ips = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public String getNode_name() {
    return this.node_name;
  }

  public void setNode_name(String node_name) {
    this.node_name = node_name;
  }

  public void unsetNode_name() {
    this.node_name = null;
  }

  /** Returns true if field node_name is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_name() {
    return this.node_name != null;
  }

  public void setNode_nameIsSet(boolean value) {
    if (!value) {
      this.node_name = null;
    }
  }

  public int getIpsSize() {
    return (this.ips == null) ? 0 : this.ips.size();
  }

  public java.util.Iterator<String> getIpsIterator() {
    return (this.ips == null) ? null : this.ips.iterator();
  }

  public void addToIps(String elem) {
    if (this.ips == null) {
      this.ips = new ArrayList<String>();
    }
    this.ips.add(elem);
  }

  public List<String> getIps() {
    return this.ips;
  }

  public void setIps(List<String> ips) {
    this.ips = ips;
  }

  public void unsetIps() {
    this.ips = null;
  }

  /** Returns true if field ips is set (has been assigned a value) and false otherwise */
  public boolean isSetIps() {
    return this.ips != null;
  }

  public void setIpsIsSet(boolean value) {
    if (!value) {
      this.ips = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public void setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_NAME:
      if (value == null) {
        unsetNode_name();
      } else {
        setNode_name((String)value);
      }
      break;

    case IPS:
      if (value == null) {
        unsetIps();
      } else {
        setIps((List<String>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_NAME:
      return getNode_name();

    case IPS:
      return getIps();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_NAME:
      return isSetNode_name();
    case IPS:
      return isSetIps();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Node)
      return this.equals((Node)that);
    return false;
  }

  public boolean equals(Node that) {
    if (that == null)
      return false;

    boolean this_present_node_name = true && this.isSetNode_name();
    boolean that_present_node_name = true && that.isSetNode_name();
    if (this_present_node_name || that_present_node_name) {
      if (!(this_present_node_name && that_present_node_name))
        return false;
      if (!this.node_name.equals(that.node_name))
        return false;
    }

    boolean this_present_ips = true && this.isSetIps();
    boolean that_present_ips = true && that.isSetIps();
    if (this_present_ips || that_present_ips) {
      if (!(this_present_ips && that_present_ips))
        return false;
      if (!this.ips.equals(that.ips))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_node_name = true && (isSetNode_name());
    builder.append(present_node_name);
    if (present_node_name)
      builder.append(node_name);

    boolean present_ips = true && (isSetIps());
    builder.append(present_ips);
    if (present_ips)
      builder.append(ips);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    return builder.toHashCode();
  }

  public int compareTo(Node other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Node typedOther = (Node)other;

    lastComparison = Boolean.valueOf(isSetNode_name()).compareTo(typedOther.isSetNode_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_name, typedOther.node_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIps()).compareTo(typedOther.isSetIps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ips, typedOther.ips);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Node(");
    boolean first = true;

    sb.append("node_name:");
    if (this.node_name == null) {
      sb.append("null");
    } else {
      sb.append(this.node_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ips:");
    if (this.ips == null) {
      sb.append("null");
    } else {
      sb.append(this.ips);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeStandardSchemeFactory implements SchemeFactory {
    public NodeStandardScheme getScheme() {
      return new NodeStandardScheme();
    }
  }

  private static class NodeStandardScheme extends StandardScheme<Node> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Node struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.node_name = iprot.readString();
              struct.setNode_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.ips = new ArrayList<String>(_list78.size);
                for (int _i79 = 0; _i79 < _list78.size; ++_i79)
                {
                  String _elem80; // required
                  _elem80 = iprot.readString();
                  struct.ips.add(_elem80);
                }
                iprot.readListEnd();
              }
              struct.setIpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Node struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.node_name != null) {
        oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.node_name);
        oprot.writeFieldEnd();
      }
      if (struct.ips != null) {
        oprot.writeFieldBegin(IPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ips.size()));
          for (String _iter81 : struct.ips)
          {
            oprot.writeString(_iter81);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeTupleSchemeFactory implements SchemeFactory {
    public NodeTupleScheme getScheme() {
      return new NodeTupleScheme();
    }
  }

  private static class NodeTupleScheme extends TupleScheme<Node> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Node struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNode_name()) {
        optionals.set(0);
      }
      if (struct.isSetIps()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNode_name()) {
        oprot.writeString(struct.node_name);
      }
      if (struct.isSetIps()) {
        {
          oprot.writeI32(struct.ips.size());
          for (String _iter82 : struct.ips)
          {
            oprot.writeString(_iter82);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Node struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.node_name = iprot.readString();
        struct.setNode_nameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ips = new ArrayList<String>(_list83.size);
          for (int _i84 = 0; _i84 < _list83.size; ++_i84)
          {
            String _elem85; // required
            _elem85 = iprot.readString();
            struct.ips.add(_elem85);
          }
        }
        struct.setIpsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}

