/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SFileRef implements org.apache.thrift.TBase<SFileRef, SFileRef._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SFileRef");

  private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ORIGIN_FID_FIELD_DESC = new org.apache.thrift.protocol.TField("origin_fid", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SFileRefStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SFileRefTupleSchemeFactory());
  }

  private SFile file; // required
  private long origin_fid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE((short)1, "file"),
    ORIGIN_FID((short)2, "origin_fid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE
          return FILE;
        case 2: // ORIGIN_FID
          return ORIGIN_FID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORIGIN_FID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SFile.class)));
    tmpMap.put(_Fields.ORIGIN_FID, new org.apache.thrift.meta_data.FieldMetaData("origin_fid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SFileRef.class, metaDataMap);
  }

  public SFileRef() {
  }

  public SFileRef(
    SFile file,
    long origin_fid)
  {
    this();
    this.file = file;
    this.origin_fid = origin_fid;
    setOrigin_fidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SFileRef(SFileRef other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFile()) {
      this.file = new SFile(other.file);
    }
    this.origin_fid = other.origin_fid;
  }

  public SFileRef deepCopy() {
    return new SFileRef(this);
  }

  @Override
  public void clear() {
    this.file = null;
    setOrigin_fidIsSet(false);
    this.origin_fid = 0;
  }

  public SFile getFile() {
    return this.file;
  }

  public void setFile(SFile file) {
    this.file = file;
  }

  public void unsetFile() {
    this.file = null;
  }

  /** Returns true if field file is set (has been assigned a value) and false otherwise */
  public boolean isSetFile() {
    return this.file != null;
  }

  public void setFileIsSet(boolean value) {
    if (!value) {
      this.file = null;
    }
  }

  public long getOrigin_fid() {
    return this.origin_fid;
  }

  public void setOrigin_fid(long origin_fid) {
    this.origin_fid = origin_fid;
    setOrigin_fidIsSet(true);
  }

  public void unsetOrigin_fid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORIGIN_FID_ISSET_ID);
  }

  /** Returns true if field origin_fid is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin_fid() {
    return EncodingUtils.testBit(__isset_bitfield, __ORIGIN_FID_ISSET_ID);
  }

  public void setOrigin_fidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORIGIN_FID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE:
      if (value == null) {
        unsetFile();
      } else {
        setFile((SFile)value);
      }
      break;

    case ORIGIN_FID:
      if (value == null) {
        unsetOrigin_fid();
      } else {
        setOrigin_fid((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE:
      return getFile();

    case ORIGIN_FID:
      return Long.valueOf(getOrigin_fid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE:
      return isSetFile();
    case ORIGIN_FID:
      return isSetOrigin_fid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SFileRef)
      return this.equals((SFileRef)that);
    return false;
  }

  public boolean equals(SFileRef that) {
    if (that == null)
      return false;

    boolean this_present_file = true && this.isSetFile();
    boolean that_present_file = true && that.isSetFile();
    if (this_present_file || that_present_file) {
      if (!(this_present_file && that_present_file))
        return false;
      if (!this.file.equals(that.file))
        return false;
    }

    boolean this_present_origin_fid = true;
    boolean that_present_origin_fid = true;
    if (this_present_origin_fid || that_present_origin_fid) {
      if (!(this_present_origin_fid && that_present_origin_fid))
        return false;
      if (this.origin_fid != that.origin_fid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_file = true && (isSetFile());
    builder.append(present_file);
    if (present_file)
      builder.append(file);

    boolean present_origin_fid = true;
    builder.append(present_origin_fid);
    if (present_origin_fid)
      builder.append(origin_fid);

    return builder.toHashCode();
  }

  public int compareTo(SFileRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SFileRef typedOther = (SFileRef)other;

    lastComparison = Boolean.valueOf(isSetFile()).compareTo(typedOther.isSetFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, typedOther.file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin_fid()).compareTo(typedOther.isSetOrigin_fid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin_fid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin_fid, typedOther.origin_fid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SFileRef(");
    boolean first = true;

    sb.append("file:");
    if (this.file == null) {
      sb.append("null");
    } else {
      sb.append(this.file);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("origin_fid:");
    sb.append(this.origin_fid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (file != null) {
      file.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SFileRefStandardSchemeFactory implements SchemeFactory {
    public SFileRefStandardScheme getScheme() {
      return new SFileRefStandardScheme();
    }
  }

  private static class SFileRefStandardScheme extends StandardScheme<SFileRef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SFileRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.file = new SFile();
              struct.file.read(iprot);
              struct.setFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORIGIN_FID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.origin_fid = iprot.readI64();
              struct.setOrigin_fidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SFileRef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file != null) {
        oprot.writeFieldBegin(FILE_FIELD_DESC);
        struct.file.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORIGIN_FID_FIELD_DESC);
      oprot.writeI64(struct.origin_fid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SFileRefTupleSchemeFactory implements SchemeFactory {
    public SFileRefTupleScheme getScheme() {
      return new SFileRefTupleScheme();
    }
  }

  private static class SFileRefTupleScheme extends TupleScheme<SFileRef> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SFileRef struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFile()) {
        optionals.set(0);
      }
      if (struct.isSetOrigin_fid()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFile()) {
        struct.file.write(oprot);
      }
      if (struct.isSetOrigin_fid()) {
        oprot.writeI64(struct.origin_fid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SFileRef struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.file = new SFile();
        struct.file.read(iprot);
        struct.setFileIsSet(true);
      }
      if (incoming.get(1)) {
        struct.origin_fid = iprot.readI64();
        struct.setOrigin_fidIsSet(true);
      }
    }
  }

}

