/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SFileLocation implements org.apache.thrift.TBase<SFileLocation, SFileLocation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SFileLocation");

  private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("node_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DEVID_FIELD_DESC = new org.apache.thrift.protocol.TField("devid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rep_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField VISIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("visit_status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SFileLocationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SFileLocationTupleSchemeFactory());
  }

  private String node_name; // required
  private long fid; // required
  private String devid; // required
  private String location; // required
  private int rep_id; // required
  private long update_time; // required
  private int visit_status; // required
  private String digest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_NAME((short)1, "node_name"),
    FID((short)2, "fid"),
    DEVID((short)3, "devid"),
    LOCATION((short)4, "location"),
    REP_ID((short)5, "rep_id"),
    UPDATE_TIME((short)6, "update_time"),
    VISIT_STATUS((short)7, "visit_status"),
    DIGEST((short)8, "digest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_NAME
          return NODE_NAME;
        case 2: // FID
          return FID;
        case 3: // DEVID
          return DEVID;
        case 4: // LOCATION
          return LOCATION;
        case 5: // REP_ID
          return REP_ID;
        case 6: // UPDATE_TIME
          return UPDATE_TIME;
        case 7: // VISIT_STATUS
          return VISIT_STATUS;
        case 8: // DIGEST
          return DIGEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FID_ISSET_ID = 0;
  private static final int __REP_ID_ISSET_ID = 1;
  private static final int __UPDATE_TIME_ISSET_ID = 2;
  private static final int __VISIT_STATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("node_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEVID, new org.apache.thrift.meta_data.FieldMetaData("devid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REP_ID, new org.apache.thrift.meta_data.FieldMetaData("rep_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("visit_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SFileLocation.class, metaDataMap);
  }

  public SFileLocation() {
  }

  public SFileLocation(
    String node_name,
    long fid,
    String devid,
    String location,
    int rep_id,
    long update_time,
    int visit_status,
    String digest)
  {
    this();
    this.node_name = node_name;
    this.fid = fid;
    setFidIsSet(true);
    this.devid = devid;
    this.location = location;
    this.rep_id = rep_id;
    setRep_idIsSet(true);
    this.update_time = update_time;
    setUpdate_timeIsSet(true);
    this.visit_status = visit_status;
    setVisit_statusIsSet(true);
    this.digest = digest;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SFileLocation(SFileLocation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNode_name()) {
      this.node_name = other.node_name;
    }
    this.fid = other.fid;
    if (other.isSetDevid()) {
      this.devid = other.devid;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    this.rep_id = other.rep_id;
    this.update_time = other.update_time;
    this.visit_status = other.visit_status;
    if (other.isSetDigest()) {
      this.digest = other.digest;
    }
  }

  public SFileLocation deepCopy() {
    return new SFileLocation(this);
  }

  @Override
  public void clear() {
    this.node_name = null;
    setFidIsSet(false);
    this.fid = 0;
    this.devid = null;
    this.location = null;
    setRep_idIsSet(false);
    this.rep_id = 0;
    setUpdate_timeIsSet(false);
    this.update_time = 0;
    setVisit_statusIsSet(false);
    this.visit_status = 0;
    this.digest = null;
  }

  public String getNode_name() {
    return this.node_name;
  }

  public void setNode_name(String node_name) {
    this.node_name = node_name;
  }

  public void unsetNode_name() {
    this.node_name = null;
  }

  /** Returns true if field node_name is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_name() {
    return this.node_name != null;
  }

  public void setNode_nameIsSet(boolean value) {
    if (!value) {
      this.node_name = null;
    }
  }

  public long getFid() {
    return this.fid;
  }

  public void setFid(long fid) {
    this.fid = fid;
    setFidIsSet(true);
  }

  public void unsetFid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
  }

  /** Returns true if field fid is set (has been assigned a value) and false otherwise */
  public boolean isSetFid() {
    return EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
  }

  public void setFidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
  }

  public String getDevid() {
    return this.devid;
  }

  public void setDevid(String devid) {
    this.devid = devid;
  }

  public void unsetDevid() {
    this.devid = null;
  }

  /** Returns true if field devid is set (has been assigned a value) and false otherwise */
  public boolean isSetDevid() {
    return this.devid != null;
  }

  public void setDevidIsSet(boolean value) {
    if (!value) {
      this.devid = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getRep_id() {
    return this.rep_id;
  }

  public void setRep_id(int rep_id) {
    this.rep_id = rep_id;
    setRep_idIsSet(true);
  }

  public void unsetRep_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REP_ID_ISSET_ID);
  }

  /** Returns true if field rep_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRep_id() {
    return EncodingUtils.testBit(__isset_bitfield, __REP_ID_ISSET_ID);
  }

  public void setRep_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REP_ID_ISSET_ID, value);
  }

  public long getUpdate_time() {
    return this.update_time;
  }

  public void setUpdate_time(long update_time) {
    this.update_time = update_time;
    setUpdate_timeIsSet(true);
  }

  public void unsetUpdate_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID);
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID);
  }

  public void setUpdate_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID, value);
  }

  public int getVisit_status() {
    return this.visit_status;
  }

  public void setVisit_status(int visit_status) {
    this.visit_status = visit_status;
    setVisit_statusIsSet(true);
  }

  public void unsetVisit_status() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VISIT_STATUS_ISSET_ID);
  }

  /** Returns true if field visit_status is set (has been assigned a value) and false otherwise */
  public boolean isSetVisit_status() {
    return EncodingUtils.testBit(__isset_bitfield, __VISIT_STATUS_ISSET_ID);
  }

  public void setVisit_statusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VISIT_STATUS_ISSET_ID, value);
  }

  public String getDigest() {
    return this.digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_NAME:
      if (value == null) {
        unsetNode_name();
      } else {
        setNode_name((String)value);
      }
      break;

    case FID:
      if (value == null) {
        unsetFid();
      } else {
        setFid((Long)value);
      }
      break;

    case DEVID:
      if (value == null) {
        unsetDevid();
      } else {
        setDevid((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case REP_ID:
      if (value == null) {
        unsetRep_id();
      } else {
        setRep_id((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((Long)value);
      }
      break;

    case VISIT_STATUS:
      if (value == null) {
        unsetVisit_status();
      } else {
        setVisit_status((Integer)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        setDigest((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_NAME:
      return getNode_name();

    case FID:
      return Long.valueOf(getFid());

    case DEVID:
      return getDevid();

    case LOCATION:
      return getLocation();

    case REP_ID:
      return Integer.valueOf(getRep_id());

    case UPDATE_TIME:
      return Long.valueOf(getUpdate_time());

    case VISIT_STATUS:
      return Integer.valueOf(getVisit_status());

    case DIGEST:
      return getDigest();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_NAME:
      return isSetNode_name();
    case FID:
      return isSetFid();
    case DEVID:
      return isSetDevid();
    case LOCATION:
      return isSetLocation();
    case REP_ID:
      return isSetRep_id();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case VISIT_STATUS:
      return isSetVisit_status();
    case DIGEST:
      return isSetDigest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SFileLocation)
      return this.equals((SFileLocation)that);
    return false;
  }

  public boolean equals(SFileLocation that) {
    if (that == null)
      return false;

    boolean this_present_node_name = true && this.isSetNode_name();
    boolean that_present_node_name = true && that.isSetNode_name();
    if (this_present_node_name || that_present_node_name) {
      if (!(this_present_node_name && that_present_node_name))
        return false;
      if (!this.node_name.equals(that.node_name))
        return false;
    }

    boolean this_present_fid = true;
    boolean that_present_fid = true;
    if (this_present_fid || that_present_fid) {
      if (!(this_present_fid && that_present_fid))
        return false;
      if (this.fid != that.fid)
        return false;
    }

    boolean this_present_devid = true && this.isSetDevid();
    boolean that_present_devid = true && that.isSetDevid();
    if (this_present_devid || that_present_devid) {
      if (!(this_present_devid && that_present_devid))
        return false;
      if (!this.devid.equals(that.devid))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_rep_id = true;
    boolean that_present_rep_id = true;
    if (this_present_rep_id || that_present_rep_id) {
      if (!(this_present_rep_id && that_present_rep_id))
        return false;
      if (this.rep_id != that.rep_id)
        return false;
    }

    boolean this_present_update_time = true;
    boolean that_present_update_time = true;
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (this.update_time != that.update_time)
        return false;
    }

    boolean this_present_visit_status = true;
    boolean that_present_visit_status = true;
    if (this_present_visit_status || that_present_visit_status) {
      if (!(this_present_visit_status && that_present_visit_status))
        return false;
      if (this.visit_status != that.visit_status)
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_node_name = true && (isSetNode_name());
    builder.append(present_node_name);
    if (present_node_name)
      builder.append(node_name);

    boolean present_fid = true;
    builder.append(present_fid);
    if (present_fid)
      builder.append(fid);

    boolean present_devid = true && (isSetDevid());
    builder.append(present_devid);
    if (present_devid)
      builder.append(devid);

    boolean present_location = true && (isSetLocation());
    builder.append(present_location);
    if (present_location)
      builder.append(location);

    boolean present_rep_id = true;
    builder.append(present_rep_id);
    if (present_rep_id)
      builder.append(rep_id);

    boolean present_update_time = true;
    builder.append(present_update_time);
    if (present_update_time)
      builder.append(update_time);

    boolean present_visit_status = true;
    builder.append(present_visit_status);
    if (present_visit_status)
      builder.append(visit_status);

    boolean present_digest = true && (isSetDigest());
    builder.append(present_digest);
    if (present_digest)
      builder.append(digest);

    return builder.toHashCode();
  }

  public int compareTo(SFileLocation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SFileLocation typedOther = (SFileLocation)other;

    lastComparison = Boolean.valueOf(isSetNode_name()).compareTo(typedOther.isSetNode_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_name, typedOther.node_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFid()).compareTo(typedOther.isSetFid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, typedOther.fid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevid()).compareTo(typedOther.isSetDevid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devid, typedOther.devid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRep_id()).compareTo(typedOther.isSetRep_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRep_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rep_id, typedOther.rep_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(typedOther.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, typedOther.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisit_status()).compareTo(typedOther.isSetVisit_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisit_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visit_status, typedOther.visit_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDigest()).compareTo(typedOther.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, typedOther.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SFileLocation(");
    boolean first = true;

    sb.append("node_name:");
    if (this.node_name == null) {
      sb.append("null");
    } else {
      sb.append(this.node_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fid:");
    sb.append(this.fid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("devid:");
    if (this.devid == null) {
      sb.append("null");
    } else {
      sb.append(this.devid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rep_id:");
    sb.append(this.rep_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("update_time:");
    sb.append(this.update_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("visit_status:");
    sb.append(this.visit_status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("digest:");
    if (this.digest == null) {
      sb.append("null");
    } else {
      sb.append(this.digest);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SFileLocationStandardSchemeFactory implements SchemeFactory {
    public SFileLocationStandardScheme getScheme() {
      return new SFileLocationStandardScheme();
    }
  }

  private static class SFileLocationStandardScheme extends StandardScheme<SFileLocation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SFileLocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.node_name = iprot.readString();
              struct.setNode_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fid = iprot.readI64();
              struct.setFidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.devid = iprot.readString();
              struct.setDevidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rep_id = iprot.readI32();
              struct.setRep_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.update_time = iprot.readI64();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VISIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.visit_status = iprot.readI32();
              struct.setVisit_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.digest = iprot.readString();
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SFileLocation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.node_name != null) {
        oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.node_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FID_FIELD_DESC);
      oprot.writeI64(struct.fid);
      oprot.writeFieldEnd();
      if (struct.devid != null) {
        oprot.writeFieldBegin(DEVID_FIELD_DESC);
        oprot.writeString(struct.devid);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REP_ID_FIELD_DESC);
      oprot.writeI32(struct.rep_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.update_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VISIT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.visit_status);
      oprot.writeFieldEnd();
      if (struct.digest != null) {
        oprot.writeFieldBegin(DIGEST_FIELD_DESC);
        oprot.writeString(struct.digest);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SFileLocationTupleSchemeFactory implements SchemeFactory {
    public SFileLocationTupleScheme getScheme() {
      return new SFileLocationTupleScheme();
    }
  }

  private static class SFileLocationTupleScheme extends TupleScheme<SFileLocation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SFileLocation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNode_name()) {
        optionals.set(0);
      }
      if (struct.isSetFid()) {
        optionals.set(1);
      }
      if (struct.isSetDevid()) {
        optionals.set(2);
      }
      if (struct.isSetLocation()) {
        optionals.set(3);
      }
      if (struct.isSetRep_id()) {
        optionals.set(4);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(5);
      }
      if (struct.isSetVisit_status()) {
        optionals.set(6);
      }
      if (struct.isSetDigest()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetNode_name()) {
        oprot.writeString(struct.node_name);
      }
      if (struct.isSetFid()) {
        oprot.writeI64(struct.fid);
      }
      if (struct.isSetDevid()) {
        oprot.writeString(struct.devid);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetRep_id()) {
        oprot.writeI32(struct.rep_id);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeI64(struct.update_time);
      }
      if (struct.isSetVisit_status()) {
        oprot.writeI32(struct.visit_status);
      }
      if (struct.isSetDigest()) {
        oprot.writeString(struct.digest);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SFileLocation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.node_name = iprot.readString();
        struct.setNode_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fid = iprot.readI64();
        struct.setFidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.devid = iprot.readString();
        struct.setDevidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rep_id = iprot.readI32();
        struct.setRep_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.update_time = iprot.readI64();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.visit_status = iprot.readI32();
        struct.setVisit_statusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.digest = iprot.readString();
        struct.setDigestIsSet(true);
      }
    }
  }

}

